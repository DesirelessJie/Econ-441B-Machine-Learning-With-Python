# -*- coding: utf-8 -*-
"""Resampling.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GUsVckaylpmnxSImyWQk_G_ivCHCUjX3

# 0.) Import the Credit Card Fraud Data From CCLE
"""

import pandas as pd
from google.colab import drive
import matplotlib.pyplot as plt
import numpy as np

drive.mount('/content/gdrive/', force_remount = True)

df = pd.read_csv("/content/gdrive/MyDrive/Econ441B/fraudTest.csv", header = 0)

df.head()

df.columns

"""# 1.) Use scikit learn preprocessing to split the data into 70/30 in out of sample"""

from sklearn.model_selection import train_test_split

col_list = ["trans_date_trans_time", "category", "gender", "zip", "amt", "city_pop", "is_fraud"]

# Split the data into features (X) and target (y)
df = df[col_list].copy()
df["trans_date_trans_time"] = pd.to_datetime(df["trans_date_trans_time"])
df["sec"] = [i.second for i in df["trans_date_trans_time"]]

X = pd.get_dummies(df, ["category", "gender"]).drop(["trans_date_trans_time", "is_fraud"], axis = 1)
y = df['is_fraud']

# Split the data into 70% train and 30% test
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

"""# 2.) Make three sets of training data (Oversample, Undersample and SMOTE)"""

import pandas as pd
from sklearn.datasets import make_classification
from imblearn.over_sampling import RandomOverSampler
from imblearn.under_sampling import RandomUnderSampler
from imblearn.over_sampling import SMOTE

# Oversample using RandomOverSampler
ros = RandomOverSampler(sampling_strategy='minority')
X_resampled_ros, y_resampled_ros = ros.fit_resample(X_train, y_train)
df_resampled_ros = pd.DataFrame(X_resampled_ros)
df_resampled_ros['is_fraud'] = y_resampled_ros

# Undersample using RandomUnderSampler
rus = RandomUnderSampler(sampling_strategy='majority')
X_resampled_rus, y_resampled_rus = rus.fit_resample(X_train, y_train)
df_resampled_rus = pd.DataFrame(X_resampled_rus)
df_resampled_rus['is_fraud'] = y_resampled_rus

# Synthetic oversample using SMOTE
smote = SMOTE(sampling_strategy='minority')
X_resampled_smote, y_resampled_smote = smote.fit_resample(X_train, y_train)
df_resampled_smote = pd.DataFrame(X_resampled_smote)
df_resampled_smote['is_fraud'] = y_resampled_smote

"""# 3.) Train three logistic regression models """

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix

# Train Logistic Regression model on oversampled data
log_reg_ros = LogisticRegression()
log_reg_ros.fit(df_resampled_ros.drop('is_fraud', axis=1), df_resampled_ros['is_fraud'])

# Train Logistic Regression model on undersampled data
log_reg_rus = LogisticRegression()
log_reg_rus.fit(df_resampled_rus.drop('is_fraud', axis=1), df_resampled_rus['is_fraud'])

# Train Logistic Regression model on SMOTE oversampled data
log_reg_smote = LogisticRegression()
log_reg_smote.fit(df_resampled_smote.drop('is_fraud', axis=1), df_resampled_smote['is_fraud'])

"""# 4.) Test the three models"""

# Predict and evaluate accuracy for oversampled data
y_pred_ros = log_reg_ros.predict(X_test)
accuracy_ros = accuracy_score(y_test, y_pred_ros)
cm_ros = confusion_matrix(y_test, y_pred_ros)

# Predict and evaluate accuracy for undersampled data
y_pred_rus = log_reg_rus.predict(X_test)
accuracy_rus = accuracy_score(y_test, y_pred_rus)
cm_rus = confusion_matrix(y_test, y_pred_rus)

# Predict and evaluate accuracy for SMOTE oversampled data
y_pred_smote = log_reg_smote.predict(X_test)
accuracy_smote = accuracy_score(y_test, y_pred_smote)
cm_smote = confusion_matrix(y_test, y_pred_smote)

# Print accuracy and confusion matrix for each model
print("Accuracy of oversampled data: ", accuracy_ros)
print("Confusion Matrix of oversampled data: \n", cm_ros)

print("Accuracy of undersampled data: ", accuracy_rus)
print("Confusion Matrix of undersampled data: \n", cm_rus)

print("Accuracy of SMOTE oversampled data: ", accuracy_smote)
print("Confusion Matrix of SMOTE oversampled data: \n", cm_smote)

"""# 5.) Which performed best in Out of Sample metrics?

The model trained on the oversampled data performence the best in out of sample metrics.

# 6.) Pick two features and plot the two classes before and after SMOTE.
"""

import matplotlib.pyplot as plt
plt.scatter(X_train.amt, X_train.city_pop)
plt.show()

plt.scatter(X_resampled_smote.amt, X_resampled_smote.city_pop)
plt.show()
